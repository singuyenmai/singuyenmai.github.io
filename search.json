[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Si Nguyen’s Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nModelling\n\n\nPython\n\n\n\n\nAn elegant model of a dynamical system. Dynamics in shape of a butterfly. Chaos, determinism, and predictibility.\n\n\n\n\n\n\nOct 9, 2022\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html",
    "title": "A chaotic butterfly",
    "section": "",
    "text": "In 2020, I enrolled in the Master’s programme in Ecology & Evolution at the University of Groningen. Right from the early days, my classes were enriched with theoretical studies and mathematical/computational models, and I, was immediately enchanted by their beauty. So I decided to dedicate my Master’s to learn and practice the science, and art of biological modeling. Today, I still don’t regret about my decision, and I think I never will.\nTheoretical models always intrigue me. There are lots of interesting things can be derived from them. And I would say: Don’t let the maths or the codes scare you! There are lots of brilliant theoretical works that came from just very simple models. Mastering math and coding is certainly needed to go deeper, but also, limited knowledge in these subjects should not prevent anyone from enjoying the science.\nIn this blog post, I would like to demonstrate a model introduced by the meteorologist Edward Lorenz in 1963. This model describes the dynamics of atmospheric convection, which, when illustrated from the right perspective, appear visually beautiful in the shape of a butterfly, as you have seen in the preview image. Yet, what is more fascinating about this model is that although the equations are in very simplistic forms, the resulting dynamics are extremely complex. Indeed, the Lorenz model is a typical example for chaotic systems and is the origin of the concept of the butterfly effect. In latter part of the blog, I would also illustrate this concept and show why long-range forcasting can still have limitations even when we already have the exact rules of things.\nTo demonstrate the model, I used Python for solving the equations and also for visualization. I would not talk much about the coding parts, so you would not have to worry if you’re not very confident with coding. But, all codes were still provided and the code cells are compacted, so that if you want to have a look, then you can still choose to show them.\nNow let’s start!"
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html#the-model",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html#the-model",
    "title": "A chaotic butterfly",
    "section": "The model",
    "text": "The model\nThe Lorenz system comprises of three dynamic elements, or variables, notated as \\(X\\) (rate of convection), \\(Y\\) (horizontal temperature), and \\(Z\\) (vertical temperature). The dynamics of these variables then are described by a set of ordinary differential equations (ODE). These equations represent the rates of change of the variables, and they are as follows:\n\\[\n\\frac{dX}{dt} = \\sigma (Y - X) \\\\\n\\frac{dY}{dt} = X (\\rho - Z) - Y \\\\\n\\frac{dZ}{dt} = X Y - \\beta Z \\\\\n\\]\nI would not explain the equations in detail here, but only note that in the equations, \\(\\sigma\\), \\(\\rho\\), and \\(\\beta\\) are constant parameters and under the setting of \\(\\sigma=10\\), \\(\\rho=28\\), and \\(\\beta=8/3\\), we would see “the butterfly” and all the interesting insights from it."
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html#the-butterfly",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html#the-butterfly",
    "title": "A chaotic butterfly",
    "section": "The butterfly",
    "text": "The butterfly\nTo see exactly how the system state, i.e. the variables, change through time, we will need to solve the ODEs by integrating them. We can do this easily in Python with the odeint function of scipy.integrate package. For it to do the job, we need the following main ingredients:\n\nA function that returns the list of the ODEs\nThe system parameters that we’re interested in: \\(\\sigma=10\\), \\(\\rho=28\\), and \\(\\beta=8/3\\)\nThe timepoints at which we would like to know the values of the three variables. Here, they are 100,000 timepoints evenly spaced from 0 to 100.\nThe initial condition, which is the system state at the initial timepoint. Here, it is a set of \\(X_{t=0} = 0.1, Y_{t=0}=0.0, Z_{t=0}=0.0\\).\n\n\n\nCode\n# Define the lorenz system\n# X, Y, and Z make up the system state, t is time\n# sigma, rho, beta are the system parameters\ndef lorenz_system(state, t, sigma, rho, beta):\n    \n    # system state depends on three variables: x, y, z\n    X, Y, Z = state\n    \n    # define the three ODEs describing the rates of change of the above three variables\n    dX_dt = sigma * (Y - X)\n    dY_dt = X * (rho - Z) - Y\n    dZ_dt = X * Y - beta * Z\n    \n    # return a list of the ODEs\n    return [dX_dt, dY_dt, dZ_dt]\n\n# Define the system parameters sigma, rho, and beta\nsigma = 10.\nrho   = 28.\nbeta  = 8./3.\n\n# Define the time points to solve for, evenly spaced between the start and end times\nstart_time = 0\nend_time = 100\n\nimport numpy as np\ntime_points = np.linspace(start_time, end_time, end_time*1000)\n\n# Define the initial system state - a list of X, Y, Z values at the initial time point, respectively\ninitial_state = [0.1, 0, 0]\n# initial_state = [0., 1., 1.05]\n\n# Solve the ODE system with `odeint`\nfrom scipy.integrate import odeint\n\n# by supplying the `odeint` with \n# 1, the function describing the system of ODEs\n# 2, list of initial system conditions\n# 3, sequence of time points to solve for\n# 4, tuple of system parameters\n# the result is an array of X, Y, and Y value arrays for each time point, with the initial values in the first row\nXYZ = odeint(lorenz_system, initial_state, time_points, args=(sigma, rho, beta))\n\n# extract the individual arrays of X, Y, and Z values\nX = XYZ[:, 0]\nY = XYZ[:, 1]\nZ = XYZ[:, 2]\n\n\nOnce these are supplied to the function, we get the solution which are 3 arrays (vectors) for the values of \\(X\\), \\(Y\\), and \\(Z\\) throughout time. Of course, these arrays have the length of 100,000 for the timepoints that we have set before, corresponding to the 100,000 system states changing throughout time. Now then, with these arrays, we can easily observe the dynamics of the system through some few more visualization steps!\nPlotting the system states as points in 3D and coloring them by their timepoints, we would see the beautiful dynamics below.\n\n\nCode\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfig = px.scatter_3d(x=X, y=Y, z=Z, \n                    color=time_points, color_continuous_scale='Spectral', \n                    width=800, height=800)\n\nfig.update_traces(marker=dict(size=0.8, line_width=0.0))\nfig.update_layout(template=\"plotly_white\", \n                  scene_camera=dict(eye=dict(x = -1., y = 1., z = 0.25)))\nfig.update_coloraxes(colorbar=dict(lenmode='fraction', len=0.75, title=\"Time\"))\n\n# add the initial state\nfig.add_trace(go.Scatter3d(x=[initial_state[0]], y=[initial_state[1]], z=[initial_state[2]], marker=dict(color='black', size=5.), \n                           mode=\"markers\", name=\"Initial condition\"))\nfig.show()\n\n\n\n                                                \n\n\nLet’s turn the coordinates around to view the dynamics from multiple angles. Are you able to find out from which angle the butterfly like in the preview image below comes from?\n\n\nCode\n# Packages for visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set plot styles, fonts, legends, and math text\nsns.set_style(\"white\")\nfont = {'family': 'sans-serif', 'serif': 'Helvetica',\n        'size': 18}\nplt.rc('font', **font)\nlegnd = {'fontsize': 11, 'handlelength': 1.5}\nplt.rc('legend', **legnd)\nmathtext = {'mathtext.default': 'regular' } \nplt.rcParams.update(mathtext)\n\n# Plotting the butterfly - a \"phase plot\" of X values against Z values\nfig, ax = plt.subplots(figsize=(10, 8))\n\nax.scatter(X, Z, c=time_points, cmap=\"Spectral\", s=5)\n\nplt.axis(\"off\")\n# fig.savefig(\"lorenz_butterfly.png\", transparent=True)\n\n\n(-19.9463248026003, 21.71937477837377, -2.4180515119231085, 50.77908175038528)\n\n\n\n\n\n\n\n\n\nWell, it’s the projection on the X-Z plane. That means it’s a plot of \\(X\\) against \\(Z\\) values.\nNow look closer to the colors of the buterfly, we see that the beauty comes from the mix of warm and cold colors in both wings. What does that exactly mean?\nBecause the change in colors represents the change in time and that the two wings represent two main regions of system state, this colorful image tells us that as time goes, the system state switchs very frequently back and forth between those two regions. To understand this dynamic clearer, let’s play the animation I created with Plotly below and follow the movement of the black dot, which indicates the system state.\nFollowing the change of the system state through time, we can see that the pattern of change seems to repeat itself. At first, the system state circles towards the right wing, yet once it lands on this wing, it circles out. The circling goes on for a while until suddenly, the system switches back to the left wing, which then, again, circles out until it moves back to the right wing. This pattern keeps repeating and can go on infinitely! Another interesting thing about the dynamics is that although the pattern is replicated, the system always takes new path and never it goes back to an old state. Geometrically, this structure is considered as a fractal."
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html#chaos-determinism",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html#chaos-determinism",
    "title": "A chaotic butterfly",
    "section": "Chaos & Determinism",
    "text": "Chaos & Determinism\nThe “strange” dynamics described above also show chaotic behaviours. To be clearer, the system is chaotic because it never converges to any specific fixed state (aka stable state), but keeps changing over time and the cyles are never exactly the same. An example of a stable system is the change in the densities of a bacterium grown on a petri dish.\n\n\nCode\nfig, ax = plt.subplots(figsize=(8, 6), nrows=3, ncols=1, sharex=True)\n\ncolors = ['tab:blue', 'tab:orange', 'tab:green']\nfor i in range(3):\n    ax[i].scatter(time_points, XYZ[:, i], s=5, c=colors[i])"
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html#determinism-predictibility",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html#determinism-predictibility",
    "title": "A chaotic butterfly",
    "section": "Determinism & Predictibility",
    "text": "Determinism & Predictibility"
  },
  {
    "objectID": "blog/01_lorenz_attractor/lorenz_attractor.html#references",
    "href": "blog/01_lorenz_attractor/lorenz_attractor.html#references",
    "title": "A chaotic butterfly",
    "section": "References",
    "text": "References\nI’ve learned to demonstrate the beauty of the Lorenz system from the following work:\n\nhttps://geoffboeing.com/2016/12/animating-lorenz-attractor-python/\nhttps://fromsystosys.netlify.app/2018/07/28/lorenz-attractor-animation-plotly/\n\nOther pieces of introductory articles about strange attractors, the Butterfly effect, and fractals - https://fractalfoundation.org/OFC/OFC-7-1.html - https://hypertextbook.com/chaos/strange/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Si-Nguyen Mai",
    "section": "",
    "text": "Hi 👋, I am Si-Nguyen Mai. I’m from Vietnam in the Far East. My original full name is Mai Thu Sĩ Nguyên. Si Nguyen (Sĩ Nguyên) is my first name, but you could call me either by this or just Nguyen or Si. Nguyen is the “first among equals” name, and Si is a nickname my friends have for me. I am, therefore, happy to be called by all of these three ways.\nI’m living in the bustle Ho Chi Minh City, also known as Saigon or as the “Pearl of the Far East”. This is also where I studied my BEng in Biomedical Engineering at the International University IU-VNU-HCMC, from 2014 to 2019. In the Fall of 2020, I moved to the Netherlands to start my MSc in Ecology & Evolution at the University of Groningen. After around 1.5 years, I then stayed in the UK for 5 months for my final research project and then completed my study in the Summer of 2022. Now, I’m looking for a new opportunity to contribute, and to learn and grow myself. \nMy scientific interests are broad and dynamic, but over the past few years and probably more to come, I have just been sticking to the world of microbes, ecology, evolution, and health. I’m also specifically attracted to complex systems with inter-dependent relationships and emergent behaviours, such as host-microbiome systems. Along with these topics, I enjoy coding and working with data. My enthusiasm for modeling only started very recently, in the beginning of my Master’s. Yet, it has grown so strong that although my time at university has ended, I’m still continuing my learning. Last but not least, I love sharing what I’ve learned to other people and, therefore, writing the blog posts here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Si-Nguyen Mai",
    "section": "",
    "text": "“Good morning!  And in case I don’t see ya,  good afternoon, good evening, and good night!”\n\n\n\n  Hi 👋, I’m Si-Nguyen Mai.\nI generate and use computer codes to understand and engineer life 🦠 🌏.\nWelcome to my virtual world! 🌌"
  }
]